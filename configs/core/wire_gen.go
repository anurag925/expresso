// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package core

import (
	"expresso/configs/configurations"
	"expresso/configs/core/initializers"
)

// Injectors from wire.go:

func InitializeBackendApp() (App, error) {
	config, err := configurations.LoadConfigs()
	if err != nil {
		return nil, err
	}
	fileLogger, err := initializers.ProvideDefaultFileLogger(config)
	if err != nil {
		return nil, err
	}
	mySQL, err := initializers.ProvideDefaultMySqlDB(config)
	if err != nil {
		return nil, err
	}
	redis, err := initializers.ProvideDefaultRedis(config)
	if err != nil {
		return nil, err
	}
	echoServer, err := initializers.ProvideDefaultHttpServer(config)
	if err != nil {
		return nil, err
	}
	mongoDB, err := initializers.DefaultMongoConnection(config)
	if err != nil {
		return nil, err
	}
	taskClient, err := initializers.ProvideDefaultTaskSchedular(config)
	if err != nil {
		return nil, err
	}
	application := NewApplication(config, fileLogger, mySQL, redis, echoServer, mongoDB, taskClient)
	return application, nil
}

func InitializeAsyncWorker() (App, error) {
	config, err := configurations.LoadConfigs()
	if err != nil {
		return nil, err
	}
	fileLogger, err := initializers.ProvideDefaultFileLogger(config)
	if err != nil {
		return nil, err
	}
	mySQL, err := initializers.ProvideDefaultMySqlDB(config)
	if err != nil {
		return nil, err
	}
	redis, err := initializers.ProvideDefaultRedis(config)
	if err != nil {
		return nil, err
	}
	echoServer, err := initializers.ProvideDefaultHttpServer(config)
	if err != nil {
		return nil, err
	}
	mongoDB, err := initializers.DefaultMongoConnection(config)
	if err != nil {
		return nil, err
	}
	taskClient, err := initializers.ProvideDefaultTaskServer(config, fileLogger)
	if err != nil {
		return nil, err
	}
	application := NewApplication(config, fileLogger, mySQL, redis, echoServer, mongoDB, taskClient)
	return application, nil
}
